.myBlockReport .pageHeader .modFlex{grid-gap:0;align-items:flex-start;gap:0}@media not all and (min-width:768px){.myBlockReport .pageHeader .modFlex{grid-gap:20px 0;flex-wrap:wrap;gap:20px 0}}.myBlockReport .pageHeader .modFlex__item.-left{width:40%}@media screen and (max-width:1440px){.myBlockReport .pageHeader .modFlex__item.-left{width:30%}}@media not all and (min-width:768px){.myBlockReport .pageHeader .modFlex__item.-left{width:100%}}.myBlockReport .pageHeader .modFlex__item.-right{width:60%}@media screen and (max-width:1440px){.myBlockReport .pageHeader .modFlex__item.-right{width:70%}}@media not all and (min-width:768px){.myBlockReport .pageHeader .modFlex__item.-right{width:100%}}.myBlockReport .pageHeader .modFlex__child{grid-gap:0 30px;align-items:flex-start;display:flex;gap:0 30px}@media not all and (min-width:768px){.myBlockReport .pageHeader .modFlex__child{grid-gap:20px 0;flex-direction:column;flex-wrap:wrap;gap:20px 0}}.myBlockReport .pageHeader .modFlex__child li.modBtnBlock{grid-gap:10px 0;flex-direction:column;gap:10px 0}@media not all and (min-width:768px){.myBlockReport .pageHeader .modFlex__child li.modBtnBlock{grid-gap:0 20px;flex-direction:row;gap:0 20px}}.myBlockReport .pageHeader .modFlex__child li.modBlock{grid-gap:0 20px;align-items:center;display:flex;gap:0 20px}@media not all and (min-width:768px){.myBlockReport .pageHeader .modFlex__child li.modBlock{flex-wrap:wrap}.myBlockReport .pageHeader .modFlex__child li.modBlock label{display:block}}.myBlockReport .pageHeader .modFlex__child li.modBlock__column{grid-gap:10px 0;display:flex;flex-direction:column;gap:10px 0}@media not all and (min-width:768px){.myBlockReport .pageHeader .modFlex__child li.modBlock__column{grid-gap:0 20px;flex-direction:row;gap:0 20px}}.myBlockReport .pageHeader .modFlex__child li.modBlock__column .itemBlock{grid-gap:0;align-items:center;display:flex;gap:0}.myBlockReport .pageHeader .modFlex__child li.modBlock__column .itemBlock label{width:80px}.myBlockReport .pageHeader .modFlex__child li.modBlock__column .itemBlock .modSelect{width:calc(100% - 80px)}.myBlockReport .pageHeader .modFlex__child .modDataPicker{width:160px}.myBlockReport .modContainer{height:60vh}.modTable{margin-bottom:30px}@media not all and (min-width:768px){.modTable.-stickyTable thead{display:none}}.modTable.-stickyTable thead th{padding:15px 0;text-align:left}.modTable.-stickyTable thead th.-member{padding-left:10px}.modTable.-stickyTable thead th.stickyTable__header{text-align:left}.modTable.-stickyTable td.collapse{padding:0;transition:.5s ease}.modTable.-stickyTable td.collapse.show{transition:.5s ease}.modTable .modFlex.mocAccd__container.-sub{grid-gap:0 5px;align-items:center;border-bottom:1px solid #b1b1b1;display:flex;gap:0 5px;padding:0 0 0 20px}@media not all and (min-width:768px){.modTable .modFlex.mocAccd__container.-sub{grid-gap:0 10px;flex-wrap:wrap;gap:0 10px}}.modTable .modFlex.mocAccd__container.-sub li{font-weight:400;padding:8px 0}.-member{min-width:230px;width:20%}@media not all and (min-width:768px){.-member{min-width:auto;width:calc(90% - 10px)}}.-check{min-width:100px;width:6%}@media not all and (min-width:768px){.-check{min-width:auto;width:10%}}.-time{min-width:180px;width:14%}@media not all and (min-width:768px){.-time{min-width:auto;width:auto}}.-labor{min-width:55px;width:5%}@media not all and (min-width:768px){.-labor{min-width:auto;width:auto}}.-job{min-width:150px;width:15%}@media not all and (min-width:768px){.-job{min-width:auto;width:auto}}.-memo{min-width:150px;width:15%}@media not all and (min-width:768px){.-memo{min-width:auto;width:auto}}.-transmiss{min-width:150px;width:15%}@media not all and (min-width:768px){.-transmiss{min-width:auto;width:auto}}.-alcohol{min-width:100px;width:10%}@media not all and (min-width:768px){.-alcohol{min-width:auto;width:auto}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
