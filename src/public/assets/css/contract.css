@charset "UTF-8";.myBlockContract{padding-top:0}.myBlockContract .modFlex{align-items:flex-end;background-color:#ebf6f8;display:inline-flex;margin-bottom:30px}@media not all and (min-width:768px){.myBlockContract .modFlex{flex-wrap:wrap;width:100%}}.myBlockContract .modFlex__item{padding:20px}@media not all and (min-width:768px){.myBlockContract .modFlex__item{width:100%}}.myBlockContract .modFlex__item .address:before,.myBlockContract .modFlex__item .company__name:before,.myBlockContract .modFlex__item .contract__end:before,.myBlockContract .modFlex__item .plan:before{display:inline-block}.myBlockContract .modFlex__item .address:before{content:"住所："}.myBlockContract .modFlex__item .plan:before{content:"ご契約プラン："}.myBlockContract .modFlex__item .contract__end:before{content:"契約終了日："}@media not all and (min-width:768px){.myBlockContract .modFlex__item .modBtn.btn4{margin:0 auto}}.myBlockContract .modTableBlock{padding:0 40px;width:100%}@media screen and (max-width:1080px){.myBlockContract .modTableBlock{overflow-x:auto;width:999px}}@media not all and (min-width:992px){.myBlockContract .modTableBlock{padding:0 20px}}@media not all and (min-width:768px){.myBlockContract .modTableBlock{padding:0 16px}}.myBlockContract table{margin-bottom:8px;min-width:1000px}.myBlockContract table td,.myBlockContract table th{border:2px solid #eee;padding:4px 8px}.myBlockContract table th{background-color:#f0f4f3}.myBlockContract table td{background-color:#fff}.myBlockContract .moneyBlock{margin:30px 0}.myBlockContract .moneyBlock__item.next-moth{font-weight:700}.myBlockContract .moneyBlock__item.consumption-tax:before,.myBlockContract .moneyBlock__item.subtotal:before,.myBlockContract .moneyBlock__item.total:before{display:inline-block;padding-right:6px}.myBlockContract .moneyBlock__item.subtotal:before{content:"小計"}.myBlockContract .moneyBlock__item.consumption-tax:before{content:"消費税"}.myBlockContract .moneyBlock__item.total:before{content:"合計"}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
