@charset "UTF-8";#schedule .modal-body{padding-bottom:50px}#schedule .modal-body .modFlex{margin-bottom:0}.myBlockSchedule .pageHeader{margin-bottom:30px}.myBlockSchedule .pageHeader .modFlex{grid-gap:0 60px;gap:0 60px}.myBlockSchedule .pageHeader .modFlex__item{grid-gap:0 20px;align-items:center;display:flex;gap:0 20px}.myBlockSchedule .pageHeader .modDataPicker{width:160px}.myBlockSchedule .pageHeader .period{cursor:default}.myBlockSchedule .pageHeader .period:after{content:"ヶ月";display:inline-block;font-weight:700}.myBlockSchedule .pageHeader .period input{text-align:center;width:50px}.myBlockSchedule .pageHeader .period input::-moz-placeholder{color:#05281a;font-weight:700}.myBlockSchedule .pageHeader .period input:-ms-input-placeholder{color:#05281a;font-weight:700}.myBlockSchedule .pageHeader .period input::placeholder{color:#05281a;font-weight:700}.myBlockSchedule .pageHeader .period input[type=number]::-webkit-inner-spin-button{display:none}.myBlockSchedule .ganttChartBlock{height:auto;overflow-x:clip;padding:0 40px;white-space:nowrap;width:2400px}.myBlockSchedule .offcanvas-collapse{background-color:#f6f6f6;border-left:1px solid #b1b1b1;bottom:0;left:100%;overflow-y:auto;padding:50px 30px;position:fixed;transition:transform .3s ease-in-out,visibility .3s ease-in-out;width:470px;z-index:100}.myBlockSchedule .offcanvas-collapse.open{transform:translateX(-100%);visibility:visible}.modContainer{height:60%;overflow-x:clip}.modal .myBlockClient{color:#05281a;line-height:normal;padding-bottom:30px}.modal .myBlockClient__project{font-size:calc(16.8px + .375vw);font-weight:700}.modal .memberInfoBlock .modal-title-sub{margin-bottom:10px}.modAccdToggle{background-color:transparent;border-bottom:none;padding:8px 8px 8px 30px}.mocAccd__container .user__avatar{height:25px;width:25px}.mocAccd__container .user__avatar+.user__avatar{margin-left:-8px}.accordion.ganttContainer__item{padding-left:0!important}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
