#master .modSecBlock{max-width:100%;min-width:auto;width:100%}@media not all and (min-width:992px){#master .stickyBlock{margin-bottom:16px}}#master .stickyBlock .nav-tabs{border-bottom:none}@media not all and (min-width:768px){#master .stickyBlock .nav-tabs{align-items:center}}#master .stickyBlock .nav-item .modBtn{margin:10px auto;width:100%}@media not all and (min-width:768px){#master .stickyBlock .nav-item .modBtn{margin:0 auto}}#master .modItem{padding:10px}#master .modContainer{box-shadow:0 0 5px 0 rgba(0,0,0,.1);max-height:60vh}#master .modContainer .card{padding:30px}@media not all and (min-width:768px){#master .modContainer .card{padding:30px 16px}}.myBlockMaster .modSecBlock{height:100%;min-width:auto}.myBlockMaster .modTable.-border td,.myBlockMaster .modTable.-border th{font-weight:700}@media not all and (min-width:768px){.myBlockMaster .modTable.-border td,.myBlockMaster .modTable.-border th{border:none;display:block;width:100%}.myBlockMaster .modTable.-border th{padding:16px}.myBlockMaster .modTable.-border td{padding:8px 16px}.myBlockMaster .modTable.-border td.mainTitle{padding-bottom:0}.myBlockMaster .modTable.-border td.subTitle{border-bottom:1px solid #748ca5;font-size:12px;padding-top:0}.myBlockMasterAddress .draggableListHeader{justify-content:flex-end}}.myBlockMasterAddress .modTable .stickyTable__header{text-align:left}.myBlockMasterAddress .modTable .input__group{padding-bottom:0;position:relative}.myBlockMasterAddress .modTable .input__group .label{color:#fff;font-size:16px;font-weight:700;padding-left:24px}.myBlockMasterAddress .modTable td,.myBlockMasterAddress .modTable th{font-weight:700;line-height:normal;padding:10px 8px;position:relative}@media not all and (min-width:768px){.myBlockMasterFolder .sideNav .nav-item{width:33.3333333333%}}.myBlockMasterFolder .draggableList,.myBlockMasterFolder .draggableListHeader{justify-content:space-between}.myBlockMasterFolder .listHeader{justify-content:center}.myBlockMasterFolder .modal-body .masterFolder__label{display:block;width:100%}.myBlockMasterPhrase .card{padding-bottom:50px;text-align:center}.myBlockMasterPhrase .card+.card{border-top:1px solid #d5d5d5;padding-top:30px}.myBlockMasterPhrase .card:last-of-type .card{padding-bottom:0}.myBlockMasterPhrase .card .card-footer{padding-top:30px}.myBlockMasterPhrase .card .card-body+.card-body{margin-top:20px}.myBlockMasterPhrase .card .card-body .modFlex{grid-gap:0;gap:0;justify-content:center}@media not all and (min-width:768px){.myBlockMasterPhrase .card .card-body .modFlex{grid-gap:10px 0;flex-wrap:wrap;gap:10px 0}}.myBlockMasterPhrase .card .card-body .modFlex li{align-items:center;display:flex;justify-content:center;padding-bottom:0;width:50%}@media not all and (min-width:768px){.myBlockMasterPhrase .card .card-body .modFlex li{justify-content:flex-start;width:100%}}.myBlockMasterPhrase .card .card-body .modFlex li label{grid-gap:0 10px;align-items:center;display:flex;gap:0 10px}@media not all and (min-width:768px){.myBlockMasterPhrase .card .card-body .modFlex li label{width:100%}}.myBlockMasterPhrase .card .card-body .modFlex li label input{width:200px}@media not all and (min-width:768px){.myBlockMasterPhrase .card .card-body .modFlex li label input{width:calc(100% - 150px)}}.myBlockMasterPhrase .card .card-body .modFlex li label span{width:120px}.myBlockMasterPhrase .modBtn.btn5{margin:0 auto;width:200px}.myBlockMasterPhrase .-delete{margin-left:5vw}@media not all and (min-width:768px){.myBlockMasterPhrase .-delete{margin-left:0}}.myBlockMasterSituation .draggableList li{font-weight:700;line-height:normal}.myBlockMasterTag .draggableListHeader li.select__all{align-items:center;display:flex;flex-direction:column}@media not all and (min-width:768px){.draggableListHeader li{font-size:12px}.draggableListHeader li.select__all{text-align:center}.draggableListHeader li span{font-size:12px}}.draggableListHeader li .label{padding-right:0!important}@media not all and (min-width:768px){.draggableListHeader li .label{font-size:12px}}.draggableList li.folder{padding-left:36px;position:relative}.draggableList li.folder:before{background:url(../img/common/icon_folder_gray.svg) no-repeat 50%;background-size:100% auto;content:"";display:block;height:20px;left:8px;position:absolute;top:50%;transform:translateY(-50%);width:20px}.draggableList li.folder input{max-width:100%;width:430px}.draggableList li .label{padding-right:0!important}@media not all and (min-width:768px){.draggableList li .label{font-size:12px}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
